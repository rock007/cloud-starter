package org.cloud.shop.controller.mobile;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.cloud.db.shop.service.ProductService;
import org.cloud.db.sys.entity.UploadFile;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

@Controller
public class FileUploadController {

	private static final Logger logger = LoggerFactory.getLogger(FileUploadController.class);
	
	@Value("${application.uploadDir}")
	private String uploadDir = "upload";
	
	@Value("${application.uploadRootDir}")
	private String uploadRootDir = "d:\files_dir";
	
	@Autowired
	private  HelperService helperService;
	
	@Autowired
	private ProductService productService;
	
	/***
	 * 文件上传
	 * @param name
	 * @param file
	 * @return
	 */
	 @RequestMapping(value="/upload.action", method=RequestMethod.POST)
	 public @ResponseBody Map<String, Object> fileUpload(@RequestParam(value="file_name",required=false) String name,
	            @RequestParam(value="file",required=true) MultipartFile file,HttpServletRequest request){
		 
			Map<String, Object>  resultMap=new HashMap<String,Object>();
        	
	        UploadFile oneFile= saveUploadFile(name, file, request);
	        	
	        if(oneFile!=null){
	        	resultMap.put("file_name", name);
	       		resultMap.put("file_url", oneFile.getPath());
	       		resultMap.put("file_id", oneFile.getId());
	       		resultMap.put("result_code", "1");
	       		resultMap.put("msg", "文件上传成功");
	        }else{
	        	resultMap.put("result_code", "-1");
	    		resultMap.put("msg", "文件上传失败");
	        }
	        				
			return resultMap;
	    }

	private UploadFile saveUploadFile(String name, MultipartFile file,
			HttpServletRequest request) {
		
	    UploadFile oneFile=new UploadFile();
		try {

			if (file.isEmpty()) {
				
				return null;
			}
			String userId=App.getCurUser().getUsername().toLowerCase(); //eg:输出到页面自动转换成小写，不知道why
			String ext = FilenameUtils.getExtension(name);
			String secName=StrUtil.makeUid()+"."+ext;
			String path=uploadDir+File.separator+userId+File.separator+secName;
			String path2=uploadDir+"/"+userId+"/"+secName;
			
			String root =uploadRootDir;// request.getServletContext().getRealPath("/");
			
			File parentDir=new File( root+File.separator+uploadDir+File.separator+userId+File.separator);
			
			if(!parentDir.exists())parentDir.mkdirs();
			
		    byte[] bytes = file.getBytes();
		    BufferedOutputStream stream =
		            new BufferedOutputStream(new FileOutputStream(new File(root+File.separator+path)));
		    stream.write(bytes);
		    stream.close();

		    oneFile.setStatus(0);
		    oneFile.setCreatedate(new Date());
		    oneFile.setName(name);
		    oneFile.setSecname(secName);
		    
		    oneFile.setExt(ext);
		    
		    oneFile.setPath(path2);
		    oneFile.setByuser(userId);
		    
		    oneFile=helperService.saveUploadFile(oneFile);
		    	
		} catch (Exception e) {
			logger.error("保存上传文件失败", e);
		}
		
		return oneFile;
	}
	 
	 @RequestMapping(value="/upload-product-pic.action", method=RequestMethod.POST)
	 public @ResponseBody JsonMsg product_pic_upload(@RequestParam(value="file_name",required=false) String name,
	            @RequestParam(value="file",required=true) MultipartFile file,
	            Long productId,
	            String  alt,/*备注，暂时不用*/
	            HttpServletRequest request){
	 
		 UploadFile oneFile= saveUploadFile(name, file, request);
		 JsonMsg result;
		 
		 if(oneFile!=null){
			 
			 ProductImage oneImage=new ProductImage();
			 oneImage.setAlt(alt);
			 oneImage.setCreate_user(App.getCurUser().getUsername());
			 oneImage.setProductId(productId);
			 oneImage.setSrc(oneFile.getPath());
			 oneImage.setStatus(0);
			 oneImage.setUpload_file_id(oneFile.getId());
			 
			 //save
			 productService.saveImage(oneImage);
			 
			 result= new JsonMsg(true,oneFile.getPath());
			 
		 }else{
			 result= new JsonMsg(true,"图片上传失败！");
		 }
		 
		 return result;
	 }
	 
	 	@RequestMapping("/product-img-{pid}.action")
		public  ResponseEntity<byte[]> getProductImage(@PathVariable Long pid,
				HttpServletResponse response, 
				HttpServletRequest request) throws Exception{
			
			HttpHeaders headers = new HttpHeaders();  
			headers.setContentType(MediaType.IMAGE_PNG);
			
		    String root =uploadRootDir;// request.getServletContext().getRealPath("/");
		    String fullPath="",subPath="";
		    
		    List<ProductImage> list=productService.get_product_images(pid,0);
		    
		    if(list.size()>0){
		    	
		    	subPath=list.get(0).getSrc();
		    	
		    	fullPath=root+File.separator+subPath;
		    	
		    	if(new File(fullPath).exists()==false){
		    		
		    		return new ResponseEntity<byte[]>(new byte[]{},  
	                        headers, HttpStatus.NOT_FOUND);
		    	}
		    	
		    	String ext = FilenameUtils.getExtension(fullPath).toLowerCase();
		    	
		    	if(ext.equals("gif")){
		    		 
		    		headers.setContentType(MediaType.IMAGE_GIF);
		    		 
		    	}else if(ext.equals("jpg")){
		    		
		    		headers.setContentType(MediaType.IMAGE_JPEG);
		    		
		    	}else if(ext.equals("png")){
		    		
		    		headers.setContentType(MediaType.IMAGE_PNG);
		    		
		    	}
		    }
		    
		    if(fullPath.equals("")){
		    	
		    	return new ResponseEntity<byte[]>(new byte[]{},  
                        headers, HttpStatus.NOT_FOUND);
		    }
		    
		    return new ResponseEntity<byte[]>(FileUtils.readFileToByteArray(new File(fullPath)),  
		                                      headers, HttpStatus.OK);  
		}
	 
}
